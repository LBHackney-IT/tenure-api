service: tenure-information-api
provider:
  name: aws
  runtime: dotnet8
  memorySize: 2048
  tracing:
    lambda: true
    apiGateway: true
  vpc: ${self:custom.vpc.${opt:stage}}
  stage: ${opt:stage}
  region: eu-west-2

plugins:
  - serverless-associate-waf
  - '@serverless/safeguards-plugin'
package:
  artifact: ./bin/release/net8.0/tenure-information-api.zip
functions:
  TenureInformationApi:
    name: ${self:service}-${self:provider.stage}
    handler: TenureInformationApi::TenureInformationApi.LambdaEntryPoint::FunctionHandlerAsync
    role: lambdaExecutionRole
    timeout: 60
    environment:
      TENURE_SNS_ARN: ${ssm:/sns-topic/${self:provider.stage}/tenure/arn}
      EDIT_CHARGES_ALLOWED_GROUPS: ${ssm:/housing-tl/${self:provider.stage}/tenure-edit-charges-allowed-groups}
      DISALLOWED_EMAIL: ${ssm:/housing-tl/${self:provider.stage}/disallowed-email}
    events:
      - http:
          path: /{proxy+}
          method: ANY
          authorizer:
            arn: ${self:custom.authorizerArns.${opt:stage}}
            type: request
            resultTtlInSeconds: 0
            identitySource: method.request.header.Authorization
            managedExternally: true
          cors:
            origin: '*'
            headers:
              - Content-Type
              - If-Match
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - x-correlation-id
            allowCredentials: false
      - http:
          path: /swagger/{proxy+}
          method: GET
          private: false

resources:
  Resources:
    lambdaExecutionRole:
      Type: AWS::IAM::Role
      Properties:
        Path: /${self:service}/${self:provider.stage}/
        RoleName: ${self:service}-lambdaExecutionRole
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        ManagedPolicyArns:
          - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
          - arn:aws:iam::aws:policy/AWSXRayDaemonWriteAccess
        Policies:
          - PolicyName: postToSns
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - "sns:Publish"
                  Resource:
                    - ${ssm:/sns-topic/${self:provider.stage}/tenure/arn}
          - PolicyName: manageLogs
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource:
                    - 'Fn::Join':
                        - ':'
                        - - 'arn:aws:logs'
                          - Ref: 'AWS::Region'
                          - Ref: 'AWS::AccountId'
                          - 'log-group:/aws/lambda/*:*:*'
          - PolicyName: lambdaInvocation
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - "lambda:InvokeFunction"
                  Resource: "*"
          - PolicyName: dynamo-stream
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - "dynamodb:DescribeStream"
                    - "dynamodb:ListStreams"
                    - "dynamodb:GetRecords"  
                    - "dynamodb:GetShardIterator"
                  Resource:
                    - 'Fn::Join':
                        - ':'
                        - - 'arn:aws:dynamodb'
                          - Ref: 'AWS::Region'
                          - Ref: 'AWS::AccountId'
                          - 'table/TenureInformation/stream/*'
          - PolicyName: dynamoDBAccess
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - "dynamodb:BatchGet*"
                    - "dynamodb:BatchWrite"
                    - "dynamodb:DeleteItem"
                    - "dynamodb:DescribeStream"
                    - "dynamodb:ListStreams"
                    - "dynamodb:DescribeTable"
                    - "dynamodb:Get*"
                    - "dynamodb:PutItem"
                    - "dynamodb:Query"
                    - "dynamodb:Scan"
                    - "dynamodb:UpdateItem"
                    - "dynamodb:GetRecords"
                    - "dynamodb:GetShardIterator"
                  Resource:
                    - 'Fn::Join':
                        - ':'
                        - - 'arn:aws:dynamodb'
                          - Ref: 'AWS::Region'
                          - Ref: 'AWS::AccountId'
                          - 'table/TenureInformation'
custom:
  authorizerArns:
    development: arn:aws:lambda:eu-west-2:859159924354:function:api-auth-verify-token-new-development-apiauthverifytokennew
    staging:     arn:aws:lambda:eu-west-2:715003523189:function:api-auth-verify-token-new-staging-apiauthverifytokennew
    production:  arn:aws:lambda:eu-west-2:153306643385:function:api-auth-verify-token-new-production-apiauthverifytokennew
    pre-production: arn:aws:lambda:eu-west-2:578479666894:function:api-auth-verify-token-new-pre-production-apiauthverifytokennew
  safeguards:
    - title: Require authorizer
      safeguard: require-authorizer
      path: ./policies
  associateWaf:
    name: Platform_APIs_Web_ACL
    version: V2
  vpc:
    development:
      subnetIds:
        - subnet-0deabb5d8fb9c3446
        - subnet-000b89c249f12a8ad
    staging:
      subnetIds:
        - subnet-06d3de1bd9181b0d7
        - subnet-0ed7d7713d1127656
    production:
      subnetIds:
        - subnet-01d3657f97a243261
        - subnet-0b7b8fea07efabf34
    pre-production:
      subnetIds:
        - subnet-08aa35159a8706faa
        - subnet-0b848c5b14f841dfb
